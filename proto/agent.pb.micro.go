// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/agent.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AgentService service

func NewAgentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AgentService service

type AgentService interface {
	// for clients grpc
	GetAgents(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error)
	GetAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error)
	CreateAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error)
	UpdateAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error)
	DeleteAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error)
	// for admin
	AdminGetListAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminCreateAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminValidateMidAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminUpdateAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminDeleteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	AgentDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentListNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentCheckLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentUpdateData(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentChangeStatus(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentSetLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetListCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetPab(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentSetupLocation(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentListVehicle(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentSubmitVehicle(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	CustomerGetDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerSearchAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerPartnerDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type agentService struct {
	c    client.Client
	name string
}

func NewAgentService(name string, c client.Client) AgentService {
	return &agentService{
		c:    c,
		name: name,
	}
}

func (c *agentService) GetAgents(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.GetAgents", in)
	out := new(AgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.GetAgent", in)
	out := new(AgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) CreateAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.CreateAgent", in)
	out := new(AgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) UpdateAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.UpdateAgent", in)
	out := new(AgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) DeleteAgent(ctx context.Context, in *AgentRequest, opts ...client.CallOption) (*AgentResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.DeleteAgent", in)
	out := new(AgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminGetListAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminGetListAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminCreateAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminCreateAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminValidateMidAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminValidateMidAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminGetDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminGetDetailAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminUpdateAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminUpdateAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AdminDeleteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AdminDeleteAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentDashboard", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentDetailAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentHistory", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentListNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentListNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentDeleteNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentReadNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentUploadPhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentDeletePhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentCheckLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentCheckLimitPickup", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentUpdateData(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentUpdateData", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentChangeStatus(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentChangeStatus", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentSetLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentSetLimitPickup", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentGetListCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentGetListCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentGetLimitPickup(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentGetLimitPickup", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentGetPab(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentGetPab", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentSetupLocation(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentSetupLocation", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentListVehicle(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentListVehicle", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) AgentSubmitVehicle(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.AgentSubmitVehicle", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) CustomerGetDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.CustomerGetDetailAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) CustomerSearchAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.CustomerSearchAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) CustomerPartnerDetailAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.CustomerPartnerDetailAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentService service

type AgentServiceHandler interface {
	// for clients grpc
	GetAgents(context.Context, *AgentRequest, *AgentResponse) error
	GetAgent(context.Context, *AgentRequest, *AgentResponse) error
	CreateAgent(context.Context, *AgentRequest, *AgentResponse) error
	UpdateAgent(context.Context, *AgentRequest, *AgentResponse) error
	DeleteAgent(context.Context, *AgentRequest, *AgentResponse) error
	// for admin
	AdminGetListAgent(context.Context, *BaseRequest, *BaseResponse) error
	AdminCreateAgent(context.Context, *BaseRequest, *BaseResponse) error
	AdminValidateMidAgent(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDetailAgent(context.Context, *BaseRequest, *BaseResponse) error
	AdminUpdateAgent(context.Context, *BaseRequest, *BaseResponse) error
	AdminDeleteAgent(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	AgentDashboard(context.Context, *BaseRequest, *BaseResponse) error
	AgentDetailAgent(context.Context, *BaseRequest, *BaseResponse) error
	AgentHistory(context.Context, *BaseRequest, *BaseResponse) error
	AgentListNotification(context.Context, *BaseRequest, *BaseResponse) error
	AgentDeleteNotification(context.Context, *BaseRequest, *BaseResponse) error
	AgentReadNotification(context.Context, *BaseRequest, *BaseResponse) error
	AgentUploadPhoto(context.Context, *BaseRequest, *BaseResponse) error
	AgentDeletePhoto(context.Context, *BaseRequest, *BaseResponse) error
	AgentCheckLimitPickup(context.Context, *BaseRequest, *BaseResponse) error
	AgentUpdateData(context.Context, *BaseRequest, *BaseResponse) error
	AgentChangeStatus(context.Context, *BaseRequest, *BaseResponse) error
	AgentSetLimitPickup(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetListCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetLimitPickup(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetPab(context.Context, *BaseRequest, *BaseResponse) error
	AgentSetupLocation(context.Context, *BaseRequest, *BaseResponse) error
	AgentListVehicle(context.Context, *BaseRequest, *BaseResponse) error
	AgentSubmitVehicle(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	CustomerGetDetailAgent(context.Context, *BaseRequest, *BaseResponse) error
	CustomerSearchAgent(context.Context, *BaseRequest, *BaseResponse) error
	CustomerPartnerDetailAgent(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterAgentServiceHandler(s server.Server, hdlr AgentServiceHandler, opts ...server.HandlerOption) error {
	type agentService interface {
		GetAgents(ctx context.Context, in *AgentRequest, out *AgentResponse) error
		GetAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error
		CreateAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error
		UpdateAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error
		DeleteAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error
		AdminGetListAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminCreateAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminValidateMidAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminUpdateAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminDeleteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentListNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentCheckLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentUpdateData(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentChangeStatus(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentSetLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetListCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetPab(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentSetupLocation(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentListVehicle(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentSubmitVehicle(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerSearchAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerPartnerDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type AgentService struct {
		agentService
	}
	h := &agentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AgentService{h}, opts...))
}

type agentServiceHandler struct {
	AgentServiceHandler
}

func (h *agentServiceHandler) GetAgents(ctx context.Context, in *AgentRequest, out *AgentResponse) error {
	return h.AgentServiceHandler.GetAgents(ctx, in, out)
}

func (h *agentServiceHandler) GetAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error {
	return h.AgentServiceHandler.GetAgent(ctx, in, out)
}

func (h *agentServiceHandler) CreateAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error {
	return h.AgentServiceHandler.CreateAgent(ctx, in, out)
}

func (h *agentServiceHandler) UpdateAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error {
	return h.AgentServiceHandler.UpdateAgent(ctx, in, out)
}

func (h *agentServiceHandler) DeleteAgent(ctx context.Context, in *AgentRequest, out *AgentResponse) error {
	return h.AgentServiceHandler.DeleteAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminGetListAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminGetListAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminCreateAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminCreateAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminValidateMidAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminValidateMidAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminGetDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminGetDetailAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminUpdateAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminUpdateAgent(ctx, in, out)
}

func (h *agentServiceHandler) AdminDeleteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AdminDeleteAgent(ctx, in, out)
}

func (h *agentServiceHandler) AgentDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentDashboard(ctx, in, out)
}

func (h *agentServiceHandler) AgentDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentDetailAgent(ctx, in, out)
}

func (h *agentServiceHandler) AgentHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentHistory(ctx, in, out)
}

func (h *agentServiceHandler) AgentListNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentListNotification(ctx, in, out)
}

func (h *agentServiceHandler) AgentDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentDeleteNotification(ctx, in, out)
}

func (h *agentServiceHandler) AgentReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentReadNotification(ctx, in, out)
}

func (h *agentServiceHandler) AgentUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentUploadPhoto(ctx, in, out)
}

func (h *agentServiceHandler) AgentDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentDeletePhoto(ctx, in, out)
}

func (h *agentServiceHandler) AgentCheckLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentCheckLimitPickup(ctx, in, out)
}

func (h *agentServiceHandler) AgentUpdateData(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentUpdateData(ctx, in, out)
}

func (h *agentServiceHandler) AgentChangeStatus(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentChangeStatus(ctx, in, out)
}

func (h *agentServiceHandler) AgentSetLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentSetLimitPickup(ctx, in, out)
}

func (h *agentServiceHandler) AgentGetListCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentGetListCustomer(ctx, in, out)
}

func (h *agentServiceHandler) AgentGetLimitPickup(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentGetLimitPickup(ctx, in, out)
}

func (h *agentServiceHandler) AgentGetPab(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentGetPab(ctx, in, out)
}

func (h *agentServiceHandler) AgentSetupLocation(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentSetupLocation(ctx, in, out)
}

func (h *agentServiceHandler) AgentListVehicle(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentListVehicle(ctx, in, out)
}

func (h *agentServiceHandler) AgentSubmitVehicle(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.AgentSubmitVehicle(ctx, in, out)
}

func (h *agentServiceHandler) CustomerGetDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.CustomerGetDetailAgent(ctx, in, out)
}

func (h *agentServiceHandler) CustomerSearchAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.CustomerSearchAgent(ctx, in, out)
}

func (h *agentServiceHandler) CustomerPartnerDetailAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AgentServiceHandler.CustomerPartnerDetailAgent(ctx, in, out)
}
