// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	// for admin
	AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	AdminLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminForgotPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminResetPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminChangePassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	CustomerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerCreatePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerVerifyPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerChangePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerForgotPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	AgentLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for partner
	PartnerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminForgotPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminForgotPassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminResetPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminResetPassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminResetPasswordValidate", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminChangePassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminChangePassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerCreatePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerCreatePin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerVerifyPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerVerifyPin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerChangePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerChangePin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerForgotPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerForgotPin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentVerifyOtpLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) PartnerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.PartnerLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	// for admin
	AdminValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	AdminLogin(context.Context, *BaseRequest, *BaseResponse) error
	AdminForgotPassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminResetPassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminResetPasswordValidate(context.Context, *BaseRequest, *BaseResponse) error
	AdminChangePassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	CustomerValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	CustomerLogin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerCreatePin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerVerifyPin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerChangePin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerForgotPin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	AgentValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	AgentLogin(context.Context, *BaseRequest, *BaseResponse) error
	AgentVerifyOtpLogin(context.Context, *BaseRequest, *BaseResponse) error
	AgentLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for partner
	PartnerLogin(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		AdminValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		AdminLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminForgotPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminResetPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminChangePassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		CustomerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerCreatePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerVerifyPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerChangePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerForgotPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		AgentLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		PartnerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) AdminValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.AdminValidateSession(ctx, in, out)
}

func (h *authServiceHandler) AdminLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminLogin(ctx, in, out)
}

func (h *authServiceHandler) AdminForgotPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminForgotPassword(ctx, in, out)
}

func (h *authServiceHandler) AdminResetPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminResetPassword(ctx, in, out)
}

func (h *authServiceHandler) AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminResetPasswordValidate(ctx, in, out)
}

func (h *authServiceHandler) AdminChangePassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminChangePassword(ctx, in, out)
}

func (h *authServiceHandler) AdminLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminLogout(ctx, in, out)
}

func (h *authServiceHandler) CustomerValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.CustomerValidateSession(ctx, in, out)
}

func (h *authServiceHandler) CustomerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerLogin(ctx, in, out)
}

func (h *authServiceHandler) CustomerCreatePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerCreatePin(ctx, in, out)
}

func (h *authServiceHandler) CustomerVerifyPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerVerifyPin(ctx, in, out)
}

func (h *authServiceHandler) CustomerChangePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerChangePin(ctx, in, out)
}

func (h *authServiceHandler) CustomerForgotPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerForgotPin(ctx, in, out)
}

func (h *authServiceHandler) CustomerLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerLogout(ctx, in, out)
}

func (h *authServiceHandler) AgentValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.AgentValidateSession(ctx, in, out)
}

func (h *authServiceHandler) AgentLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentLogin(ctx, in, out)
}

func (h *authServiceHandler) AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentVerifyOtpLogin(ctx, in, out)
}

func (h *authServiceHandler) AgentLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentLogout(ctx, in, out)
}

func (h *authServiceHandler) PartnerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.PartnerLogin(ctx, in, out)
}
