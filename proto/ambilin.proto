syntax = "proto3";

package proto;
option go_package = "github.com/devambilin/bod-ambilin-common/proto";

message BaseRequest {
  string txType               = 1;
  map<string, string> headers = 2;
  bytes params = 3;
  map<string, string> BodyString = 4;
}

message BaseResponse {
  bytes response = 1;
  map<string, string> headers = 2;
  int32 httpStatus = 3;
}

// ------------------------------------Start Auth Service-------------------------------------
service AuthService {
  //for admin
  rpc ValidateSessionAdmin(SessionRequest) returns (SessionResponse){}
  rpc LoginAdmin(BaseRequest) returns (BaseResponse){}
  rpc ForgotPasswordAdmin(BaseRequest) returns (BaseResponse){}
  rpc ResetPasswordAdmin(BaseRequest) returns (BaseResponse){}
  rpc ResetPasswordValidateAdmin(BaseRequest) returns (BaseResponse){}
  rpc ChangePasswordAdmin(BaseRequest) returns (BaseResponse){}
  rpc LogoutAdmin(BaseRequest) returns (BaseResponse){}
  //for customer
  rpc LoginCustomer(BaseRequest) returns (BaseResponse){}
  rpc CreatePinCustomer(BaseRequest) returns (BaseResponse){}
  rpc VerifyPinCustomer(BaseRequest) returns (BaseResponse){}
  rpc ChangePinCustomer(BaseRequest) returns (BaseResponse){}
  rpc ForgotPinCustomer(BaseRequest) returns (BaseResponse){}
  rpc LogoutCustomer(BaseRequest) returns (BaseResponse){}
  //for agent
  rpc ValidateSessionAgent(SessionRequest) returns (SessionResponse){}
  rpc LoginAgent(BaseRequest) returns (BaseResponse){}
  rpc VerifyOtpLoginAgent(BaseRequest) returns (BaseResponse){}
  rpc LogoutAgent(BaseRequest) returns (BaseResponse){}
  //for partner
  rpc LoginPartner(BaseRequest) returns (BaseResponse){}
}

message SessionRequest {
  string token = 1;
  string signature = 2;
}

message SessionResponse {
  int32 status = 1;
  string message = 2;
}
// ------------------------------------End Auth Service-------------------------------------

// ------------------------------------Start User Service-------------------------------------
service UserService {
  rpc GetUsers(UserRequest) returns(UserResponse){}
  rpc GetUser(UserRequest) returns(UserResponse){}
  rpc CreateUser(UserRequest) returns(UserResponse){}
  rpc UpdateUser(UserRequest) returns(UserResponse){}
  rpc DeleteUser(UserRequest) returns(UserResponse){}
  //for admin
  rpc GetListCustomerPersonalAdmin(BaseRequest) returns (BaseResponse){}
  rpc GetListCustomerPartnershipAdmin(BaseRequest) returns (BaseResponse){}
  rpc CreateCustomerAdmin(BaseRequest) returns (BaseResponse){}
  rpc ValidateCustomerPhoneAdmin(BaseRequest) returns (BaseResponse){}
  rpc GetDetailCustomerAdmin(BaseRequest) returns (BaseResponse){}
  rpc UpdateCustomerAdmin(BaseRequest) returns (BaseResponse){}
}

message UserRequest {
  string requestId = 1;
  string requestByService = 2;
  DataUser user = 3;
}

message UserResponse {
  int32 status = 1;
  string message = 2;
  string requestId = 3;
  string requestByService = 4;
  DataUser dataUser = 5;
  repeated DataUser listUser = 6;
}

message DataUser {
  string id = 1;
  string name = 2;
  string address = 3;
  string email = 4;
  string phone = 5;
  string ektp = 6;
  string accountNumber = 7;
  string photoUrl = 8;
  string accessId = 9;
}
// ------------------------------------End User Service-------------------------------------