// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/rating.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	CreateAgentRating(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingResponse, error)
	CreateCustomerRating(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingResponse, error)
	GetAgentRatings(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingListResponse, error)
	GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingTotalResponse, error)
	GetAgentRatingByTransaction(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingResponse, error)
	GetCustomerRatings(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingListResponse, error)
	GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingTotalResponse, error)
	GetCustomerRatingByTransaction(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingResponse, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) CreateAgentRating(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingResponse, error) {
	out := new(AgentRatingResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/CreateAgentRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateCustomerRating(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingResponse, error) {
	out := new(UserRatingResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/CreateCustomerRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAgentRatings(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingListResponse, error) {
	out := new(AgentRatingListResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetAgentRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingTotalResponse, error) {
	out := new(AgentRatingTotalResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetAgentRatingTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAgentRatingByTransaction(ctx context.Context, in *AgentRatingRequest, opts ...grpc.CallOption) (*AgentRatingResponse, error) {
	out := new(AgentRatingResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetAgentRatingByTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetCustomerRatings(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingListResponse, error) {
	out := new(UserRatingListResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetCustomerRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingTotalResponse, error) {
	out := new(UserRatingTotalResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetCustomerRatingTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetCustomerRatingByTransaction(ctx context.Context, in *UserRatingRequest, opts ...grpc.CallOption) (*UserRatingResponse, error) {
	out := new(UserRatingResponse)
	err := c.cc.Invoke(ctx, "/proto.RatingService/GetCustomerRatingByTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	CreateAgentRating(context.Context, *AgentRatingRequest) (*AgentRatingResponse, error)
	CreateCustomerRating(context.Context, *UserRatingRequest) (*UserRatingResponse, error)
	GetAgentRatings(context.Context, *AgentRatingRequest) (*AgentRatingListResponse, error)
	GetAgentRatingTotal(context.Context, *AgentRatingRequest) (*AgentRatingTotalResponse, error)
	GetAgentRatingByTransaction(context.Context, *AgentRatingRequest) (*AgentRatingResponse, error)
	GetCustomerRatings(context.Context, *UserRatingRequest) (*UserRatingListResponse, error)
	GetCustomerRatingTotal(context.Context, *UserRatingRequest) (*UserRatingTotalResponse, error)
	GetCustomerRatingByTransaction(context.Context, *UserRatingRequest) (*UserRatingResponse, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) CreateAgentRating(context.Context, *AgentRatingRequest) (*AgentRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentRating not implemented")
}
func (UnimplementedRatingServiceServer) CreateCustomerRating(context.Context, *UserRatingRequest) (*UserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerRating not implemented")
}
func (UnimplementedRatingServiceServer) GetAgentRatings(context.Context, *AgentRatingRequest) (*AgentRatingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentRatings not implemented")
}
func (UnimplementedRatingServiceServer) GetAgentRatingTotal(context.Context, *AgentRatingRequest) (*AgentRatingTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentRatingTotal not implemented")
}
func (UnimplementedRatingServiceServer) GetAgentRatingByTransaction(context.Context, *AgentRatingRequest) (*AgentRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentRatingByTransaction not implemented")
}
func (UnimplementedRatingServiceServer) GetCustomerRatings(context.Context, *UserRatingRequest) (*UserRatingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRatings not implemented")
}
func (UnimplementedRatingServiceServer) GetCustomerRatingTotal(context.Context, *UserRatingRequest) (*UserRatingTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRatingTotal not implemented")
}
func (UnimplementedRatingServiceServer) GetCustomerRatingByTransaction(context.Context, *UserRatingRequest) (*UserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRatingByTransaction not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_CreateAgentRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateAgentRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/CreateAgentRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateAgentRating(ctx, req.(*AgentRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateCustomerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateCustomerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/CreateCustomerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateCustomerRating(ctx, req.(*UserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAgentRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAgentRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetAgentRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAgentRatings(ctx, req.(*AgentRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAgentRatingTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAgentRatingTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetAgentRatingTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAgentRatingTotal(ctx, req.(*AgentRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAgentRatingByTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAgentRatingByTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetAgentRatingByTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAgentRatingByTransaction(ctx, req.(*AgentRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetCustomerRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetCustomerRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetCustomerRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetCustomerRatings(ctx, req.(*UserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetCustomerRatingTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetCustomerRatingTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetCustomerRatingTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetCustomerRatingTotal(ctx, req.(*UserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetCustomerRatingByTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetCustomerRatingByTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RatingService/GetCustomerRatingByTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetCustomerRatingByTransaction(ctx, req.(*UserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgentRating",
			Handler:    _RatingService_CreateAgentRating_Handler,
		},
		{
			MethodName: "CreateCustomerRating",
			Handler:    _RatingService_CreateCustomerRating_Handler,
		},
		{
			MethodName: "GetAgentRatings",
			Handler:    _RatingService_GetAgentRatings_Handler,
		},
		{
			MethodName: "GetAgentRatingTotal",
			Handler:    _RatingService_GetAgentRatingTotal_Handler,
		},
		{
			MethodName: "GetAgentRatingByTransaction",
			Handler:    _RatingService_GetAgentRatingByTransaction_Handler,
		},
		{
			MethodName: "GetCustomerRatings",
			Handler:    _RatingService_GetCustomerRatings_Handler,
		},
		{
			MethodName: "GetCustomerRatingTotal",
			Handler:    _RatingService_GetCustomerRatingTotal_Handler,
		},
		{
			MethodName: "GetCustomerRatingByTransaction",
			Handler:    _RatingService_GetCustomerRatingByTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rating.proto",
}
