// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// for admin
	AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	AdminLoginValidate(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AdminForgotPassword(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AdminResetPassword(ctx context.Context, in *AdminResetPasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AdminResetPasswordValidate(ctx context.Context, in *AdminResetPasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AdminChangePassword(ctx context.Context, in *AdminChangePasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AdminLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// for customer
	CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	CustomerLogin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error)
	CustomerCreatePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error)
	CustomerVerifyPin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error)
	CustomerVerifyChangePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	CustomerChangePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	CustomerForgotPin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	CustomerVerifyOtpForgotPin(ctx context.Context, in *CustomerVerifyOtpRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error)
	CustomerLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// for agent
	AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	AgentLogin(ctx context.Context, in *AgentLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AgentVerifyOtpLogin(ctx context.Context, in *AgentLoginRequest, opts ...grpc.CallOption) (*AgentLoginResponse, error)
	AgentLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// for partner
	PartnerLogin(ctx context.Context, in *AgentLoginPartnerRequest, opts ...grpc.CallOption) (*AgentLoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminValidateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminLoginValidate(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminLoginValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminForgotPassword(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminResetPassword(ctx context.Context, in *AdminResetPasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminResetPasswordValidate(ctx context.Context, in *AdminResetPasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminResetPasswordValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminChangePassword(ctx context.Context, in *AdminChangePasswordRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AdminLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerValidateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerLogin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error) {
	out := new(CustomerLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerCreatePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error) {
	out := new(CustomerLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerCreatePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerVerifyPin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error) {
	out := new(CustomerLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerVerifyPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerVerifyChangePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerVerifyChangePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerChangePin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerChangePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerForgotPin(ctx context.Context, in *CustomerLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerForgotPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerVerifyOtpForgotPin(ctx context.Context, in *CustomerVerifyOtpRequest, opts ...grpc.CallOption) (*CustomerLoginResponse, error) {
	out := new(CustomerLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerVerifyOtpForgotPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CustomerLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CustomerLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AgentValidateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AgentLogin(ctx context.Context, in *AgentLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AgentLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AgentVerifyOtpLogin(ctx context.Context, in *AgentLoginRequest, opts ...grpc.CallOption) (*AgentLoginResponse, error) {
	out := new(AgentLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AgentVerifyOtpLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AgentLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AgentLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PartnerLogin(ctx context.Context, in *AgentLoginPartnerRequest, opts ...grpc.CallOption) (*AgentLoginResponse, error) {
	out := new(AgentLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/PartnerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// for admin
	AdminValidateSession(context.Context, *SessionRequest) (*SessionResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	AdminLoginValidate(context.Context, *AdminLoginRequest) (*DefaultResponse, error)
	AdminForgotPassword(context.Context, *AdminLoginRequest) (*DefaultResponse, error)
	AdminResetPassword(context.Context, *AdminResetPasswordRequest) (*DefaultResponse, error)
	AdminResetPasswordValidate(context.Context, *AdminResetPasswordRequest) (*DefaultResponse, error)
	AdminChangePassword(context.Context, *AdminChangePasswordRequest) (*DefaultResponse, error)
	AdminLogout(context.Context, *LogoutRequest) (*DefaultResponse, error)
	// for customer
	CustomerValidateSession(context.Context, *SessionRequest) (*SessionResponse, error)
	CustomerLogin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error)
	CustomerCreatePin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error)
	CustomerVerifyPin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error)
	CustomerVerifyChangePin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error)
	CustomerChangePin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error)
	CustomerForgotPin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error)
	CustomerVerifyOtpForgotPin(context.Context, *CustomerVerifyOtpRequest) (*CustomerLoginResponse, error)
	CustomerLogout(context.Context, *LogoutRequest) (*DefaultResponse, error)
	// for agent
	AgentValidateSession(context.Context, *SessionRequest) (*SessionResponse, error)
	AgentLogin(context.Context, *AgentLoginRequest) (*DefaultResponse, error)
	AgentVerifyOtpLogin(context.Context, *AgentLoginRequest) (*AgentLoginResponse, error)
	AgentLogout(context.Context, *LogoutRequest) (*DefaultResponse, error)
	// for partner
	PartnerLogin(context.Context, *AgentLoginPartnerRequest) (*AgentLoginResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) AdminValidateSession(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminValidateSession not implemented")
}
func (UnimplementedAuthServiceServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAuthServiceServer) AdminLoginValidate(context.Context, *AdminLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginValidate not implemented")
}
func (UnimplementedAuthServiceServer) AdminForgotPassword(context.Context, *AdminLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) AdminResetPassword(context.Context, *AdminResetPasswordRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminResetPassword not implemented")
}
func (UnimplementedAuthServiceServer) AdminResetPasswordValidate(context.Context, *AdminResetPasswordRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminResetPasswordValidate not implemented")
}
func (UnimplementedAuthServiceServer) AdminChangePassword(context.Context, *AdminChangePasswordRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) AdminLogout(context.Context, *LogoutRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogout not implemented")
}
func (UnimplementedAuthServiceServer) CustomerValidateSession(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerValidateSession not implemented")
}
func (UnimplementedAuthServiceServer) CustomerLogin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerLogin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerCreatePin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerCreatePin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerVerifyPin(context.Context, *CustomerLoginRequest) (*CustomerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerVerifyPin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerVerifyChangePin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerVerifyChangePin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerChangePin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerChangePin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerForgotPin(context.Context, *CustomerLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerForgotPin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerVerifyOtpForgotPin(context.Context, *CustomerVerifyOtpRequest) (*CustomerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerVerifyOtpForgotPin not implemented")
}
func (UnimplementedAuthServiceServer) CustomerLogout(context.Context, *LogoutRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerLogout not implemented")
}
func (UnimplementedAuthServiceServer) AgentValidateSession(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentValidateSession not implemented")
}
func (UnimplementedAuthServiceServer) AgentLogin(context.Context, *AgentLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentLogin not implemented")
}
func (UnimplementedAuthServiceServer) AgentVerifyOtpLogin(context.Context, *AgentLoginRequest) (*AgentLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentVerifyOtpLogin not implemented")
}
func (UnimplementedAuthServiceServer) AgentLogout(context.Context, *LogoutRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentLogout not implemented")
}
func (UnimplementedAuthServiceServer) PartnerLogin(context.Context, *AgentLoginPartnerRequest) (*AgentLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnerLogin not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_AdminValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminValidateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminValidateSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminLoginValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminLoginValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminLoginValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminLoginValidate(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminForgotPassword(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminResetPassword(ctx, req.(*AdminResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminResetPasswordValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminResetPasswordValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminResetPasswordValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminResetPasswordValidate(ctx, req.(*AdminResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminChangePassword(ctx, req.(*AdminChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AdminLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerValidateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerValidateSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerLogin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerCreatePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerCreatePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerCreatePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerCreatePin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerVerifyPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerVerifyPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerVerifyPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerVerifyPin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerVerifyChangePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerVerifyChangePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerVerifyChangePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerVerifyChangePin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerChangePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerChangePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerChangePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerChangePin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerForgotPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerForgotPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerForgotPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerForgotPin(ctx, req.(*CustomerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerVerifyOtpForgotPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerVerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerVerifyOtpForgotPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerVerifyOtpForgotPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerVerifyOtpForgotPin(ctx, req.(*CustomerVerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CustomerLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CustomerLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CustomerLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CustomerLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AgentValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AgentValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AgentValidateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AgentValidateSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AgentLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AgentLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AgentLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AgentLogin(ctx, req.(*AgentLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AgentVerifyOtpLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AgentVerifyOtpLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AgentVerifyOtpLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AgentVerifyOtpLogin(ctx, req.(*AgentLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AgentLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AgentLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AgentLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AgentLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PartnerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLoginPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PartnerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/PartnerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PartnerLogin(ctx, req.(*AgentLoginPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminValidateSession",
			Handler:    _AuthService_AdminValidateSession_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _AuthService_AdminLogin_Handler,
		},
		{
			MethodName: "AdminLoginValidate",
			Handler:    _AuthService_AdminLoginValidate_Handler,
		},
		{
			MethodName: "AdminForgotPassword",
			Handler:    _AuthService_AdminForgotPassword_Handler,
		},
		{
			MethodName: "AdminResetPassword",
			Handler:    _AuthService_AdminResetPassword_Handler,
		},
		{
			MethodName: "AdminResetPasswordValidate",
			Handler:    _AuthService_AdminResetPasswordValidate_Handler,
		},
		{
			MethodName: "AdminChangePassword",
			Handler:    _AuthService_AdminChangePassword_Handler,
		},
		{
			MethodName: "AdminLogout",
			Handler:    _AuthService_AdminLogout_Handler,
		},
		{
			MethodName: "CustomerValidateSession",
			Handler:    _AuthService_CustomerValidateSession_Handler,
		},
		{
			MethodName: "CustomerLogin",
			Handler:    _AuthService_CustomerLogin_Handler,
		},
		{
			MethodName: "CustomerCreatePin",
			Handler:    _AuthService_CustomerCreatePin_Handler,
		},
		{
			MethodName: "CustomerVerifyPin",
			Handler:    _AuthService_CustomerVerifyPin_Handler,
		},
		{
			MethodName: "CustomerVerifyChangePin",
			Handler:    _AuthService_CustomerVerifyChangePin_Handler,
		},
		{
			MethodName: "CustomerChangePin",
			Handler:    _AuthService_CustomerChangePin_Handler,
		},
		{
			MethodName: "CustomerForgotPin",
			Handler:    _AuthService_CustomerForgotPin_Handler,
		},
		{
			MethodName: "CustomerVerifyOtpForgotPin",
			Handler:    _AuthService_CustomerVerifyOtpForgotPin_Handler,
		},
		{
			MethodName: "CustomerLogout",
			Handler:    _AuthService_CustomerLogout_Handler,
		},
		{
			MethodName: "AgentValidateSession",
			Handler:    _AuthService_AgentValidateSession_Handler,
		},
		{
			MethodName: "AgentLogin",
			Handler:    _AuthService_AgentLogin_Handler,
		},
		{
			MethodName: "AgentVerifyOtpLogin",
			Handler:    _AuthService_AgentVerifyOtpLogin_Handler,
		},
		{
			MethodName: "AgentLogout",
			Handler:    _AuthService_AgentLogout_Handler,
		},
		{
			MethodName: "PartnerLogin",
			Handler:    _AuthService_PartnerLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}
