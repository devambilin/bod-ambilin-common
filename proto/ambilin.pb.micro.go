// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ambilin.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	// for admin
	AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	AdminLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminForgotPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminResetPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminChangePassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	CustomerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerCreatePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerVerifyPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerChangePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerForgotPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	AgentLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for partner
	PartnerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for client
	GetDataSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) AdminValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminForgotPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminForgotPassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminResetPassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminResetPassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminResetPasswordValidate", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminChangePassword(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminChangePassword", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AdminLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AdminLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerCreatePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerCreatePin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerVerifyPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerVerifyPin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerChangePin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerChangePin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerForgotPin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerForgotPin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomerLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomerLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentValidateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentValidateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentVerifyOtpLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AgentLogout(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AgentLogout", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) PartnerLogin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.PartnerLogin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetDataSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetDataSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	// for admin
	AdminValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	AdminLogin(context.Context, *BaseRequest, *BaseResponse) error
	AdminForgotPassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminResetPassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminResetPasswordValidate(context.Context, *BaseRequest, *BaseResponse) error
	AdminChangePassword(context.Context, *BaseRequest, *BaseResponse) error
	AdminLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	CustomerValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	CustomerLogin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerCreatePin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerVerifyPin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerChangePin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerForgotPin(context.Context, *BaseRequest, *BaseResponse) error
	CustomerLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	AgentValidateSession(context.Context, *SessionRequest, *SessionResponse) error
	AgentLogin(context.Context, *BaseRequest, *BaseResponse) error
	AgentVerifyOtpLogin(context.Context, *BaseRequest, *BaseResponse) error
	AgentLogout(context.Context, *BaseRequest, *BaseResponse) error
	// for partner
	PartnerLogin(context.Context, *BaseRequest, *BaseResponse) error
	// for client
	GetDataSession(context.Context, *SessionRequest, *SessionResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		AdminValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		AdminLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminForgotPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminResetPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminChangePassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		CustomerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerCreatePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerVerifyPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerChangePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerForgotPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		AgentLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		PartnerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		GetDataSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) AdminValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.AdminValidateSession(ctx, in, out)
}

func (h *authServiceHandler) AdminLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminLogin(ctx, in, out)
}

func (h *authServiceHandler) AdminForgotPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminForgotPassword(ctx, in, out)
}

func (h *authServiceHandler) AdminResetPassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminResetPassword(ctx, in, out)
}

func (h *authServiceHandler) AdminResetPasswordValidate(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminResetPasswordValidate(ctx, in, out)
}

func (h *authServiceHandler) AdminChangePassword(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminChangePassword(ctx, in, out)
}

func (h *authServiceHandler) AdminLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AdminLogout(ctx, in, out)
}

func (h *authServiceHandler) CustomerValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.CustomerValidateSession(ctx, in, out)
}

func (h *authServiceHandler) CustomerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerLogin(ctx, in, out)
}

func (h *authServiceHandler) CustomerCreatePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerCreatePin(ctx, in, out)
}

func (h *authServiceHandler) CustomerVerifyPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerVerifyPin(ctx, in, out)
}

func (h *authServiceHandler) CustomerChangePin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerChangePin(ctx, in, out)
}

func (h *authServiceHandler) CustomerForgotPin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerForgotPin(ctx, in, out)
}

func (h *authServiceHandler) CustomerLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CustomerLogout(ctx, in, out)
}

func (h *authServiceHandler) AgentValidateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.AgentValidateSession(ctx, in, out)
}

func (h *authServiceHandler) AgentLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentLogin(ctx, in, out)
}

func (h *authServiceHandler) AgentVerifyOtpLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentVerifyOtpLogin(ctx, in, out)
}

func (h *authServiceHandler) AgentLogout(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.AgentLogout(ctx, in, out)
}

func (h *authServiceHandler) PartnerLogin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.PartnerLogin(ctx, in, out)
}

func (h *authServiceHandler) GetDataSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.GetDataSession(ctx, in, out)
}

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	// for clients grpc
	GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	// for admin
	AdminGetUserType(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminCreateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminUpdateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminDeleteCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDetailPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminCreatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminUpdatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminDeletePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	CustomerGetDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetPromo(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetDetail(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerUpdate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUsers", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetUserType(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetUserType", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListCustomerPersonal", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListCustomerPartnership", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminCreateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminCreateCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminValidateCustomerPhone", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDetailCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminUpdateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminUpdateCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminDeleteCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminDeleteCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDataMasterPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDetailPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDetailPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminCreatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminCreatePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminUpdatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminUpdatePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminDeletePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminDeletePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetDashboard", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetPromo(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetPromo", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetDetail(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetDetail", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetCustomerHistory", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerUpdate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerUpdate", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerFavouriteAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerUploadPhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerDeletePhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerReadNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerDeleteNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// for clients grpc
	GetUsers(context.Context, *UserRequest, *UserResponse) error
	GetUser(context.Context, *UserRequest, *UserResponse) error
	CreateUser(context.Context, *UserRequest, *UserResponse) error
	UpdateUser(context.Context, *UserRequest, *UserResponse) error
	DeleteUser(context.Context, *UserRequest, *UserResponse) error
	// for admin
	AdminGetUserType(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListCustomerPersonal(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListCustomerPartnership(context.Context, *BaseRequest, *BaseResponse) error
	AdminCreateCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminValidateCustomerPhone(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDetailCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminUpdateCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminDeleteCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDataMasterPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDetailPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminCreatePartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminUpdatePartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminDeletePartner(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	CustomerGetDashboard(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetPromo(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetDetail(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetCustomerHistory(context.Context, *BaseRequest, *BaseResponse) error
	CustomerUpdate(context.Context, *BaseRequest, *BaseResponse) error
	CustomerFavouriteAgent(context.Context, *BaseRequest, *BaseResponse) error
	CustomerUploadPhoto(context.Context, *BaseRequest, *BaseResponse) error
	CustomerDeletePhoto(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetNotification(context.Context, *BaseRequest, *BaseResponse) error
	CustomerReadNotification(context.Context, *BaseRequest, *BaseResponse) error
	CustomerDeleteNotification(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error
		GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		AdminGetUserType(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminCreateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminUpdateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminDeleteCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDetailPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminCreatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminUpdatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminDeletePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetPromo(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetDetail(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerUpdate(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUsers(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) AdminGetUserType(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetUserType(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListCustomerPersonal(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListCustomerPartnership(ctx, in, out)
}

func (h *userServiceHandler) AdminCreateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminCreateCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminValidateCustomerPhone(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDetailCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminUpdateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminUpdateCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminDeleteCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminDeleteCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDataMasterPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDetailPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDetailPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminCreatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminCreatePartner(ctx, in, out)
}

func (h *userServiceHandler) AdminUpdatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminUpdatePartner(ctx, in, out)
}

func (h *userServiceHandler) AdminDeletePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminDeletePartner(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetDashboard(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetPromo(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetPromo(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetDetail(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetDetail(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetCustomerHistory(ctx, in, out)
}

func (h *userServiceHandler) CustomerUpdate(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerUpdate(ctx, in, out)
}

func (h *userServiceHandler) CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerFavouriteAgent(ctx, in, out)
}

func (h *userServiceHandler) CustomerUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerUploadPhoto(ctx, in, out)
}

func (h *userServiceHandler) CustomerDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerDeletePhoto(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetNotification(ctx, in, out)
}

func (h *userServiceHandler) CustomerReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerReadNotification(ctx, in, out)
}

func (h *userServiceHandler) CustomerDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerDeleteNotification(ctx, in, out)
}

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	// for clients grpc
	GetOrders(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	GetOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	CreateOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	UpdateOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	DeleteOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	// for customer
	CustomerSubmitOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerDetailOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerConfirmOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetListOrderProcess(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerChangeStatus(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerCancelOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerCheckOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	AgentGetListProcessAndHistoryOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentAcceptOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentPickupOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGoingOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentConfirmCodeOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentUpdateAmountOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetFeeTransactionOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) GetOrders(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrders", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrder", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CreateOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CreateOrder", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.UpdateOrder", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DeleteOrder(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.DeleteOrder", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerSubmitOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerSubmitOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerDetailOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerDetailOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerConfirmOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerConfirmOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerGetListOrderProcess(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerGetListOrderProcess", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerChangeStatus(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerChangeStatus", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerCancelOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerCancelOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CustomerCheckOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CustomerCheckOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentGetListProcessAndHistoryOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentGetListProcessAndHistoryOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentAcceptOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentAcceptOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentPickupOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentPickupOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentGoingOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentGoingOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentConfirmCodeOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentConfirmCodeOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentUpdateAmountOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentUpdateAmountOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AgentGetFeeTransactionOrder(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AgentGetFeeTransactionOrder", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	// for clients grpc
	GetOrders(context.Context, *OrderRequest, *OrderResponse) error
	GetOrder(context.Context, *OrderRequest, *OrderResponse) error
	CreateOrder(context.Context, *OrderRequest, *OrderResponse) error
	UpdateOrder(context.Context, *OrderRequest, *OrderResponse) error
	DeleteOrder(context.Context, *OrderRequest, *OrderResponse) error
	// for customer
	CustomerSubmitOrder(context.Context, *BaseRequest, *BaseResponse) error
	CustomerDetailOrder(context.Context, *BaseRequest, *BaseResponse) error
	CustomerConfirmOrder(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetListOrderProcess(context.Context, *BaseRequest, *BaseResponse) error
	CustomerChangeStatus(context.Context, *BaseRequest, *BaseResponse) error
	CustomerCancelOrder(context.Context, *BaseRequest, *BaseResponse) error
	CustomerCheckOrder(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	AgentGetListProcessAndHistoryOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentAcceptOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentPickupOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentGoingOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentConfirmCodeOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentUpdateAmountOrder(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetFeeTransactionOrder(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		GetOrders(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		GetOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		CreateOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		UpdateOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		DeleteOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		CustomerSubmitOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerDetailOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerConfirmOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetListOrderProcess(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerChangeStatus(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerCancelOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerCheckOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetListProcessAndHistoryOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentAcceptOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentPickupOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGoingOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentConfirmCodeOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentUpdateAmountOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetFeeTransactionOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) GetOrders(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.GetOrders(ctx, in, out)
}

func (h *orderServiceHandler) GetOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.GetOrder(ctx, in, out)
}

func (h *orderServiceHandler) CreateOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.CreateOrder(ctx, in, out)
}

func (h *orderServiceHandler) UpdateOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.UpdateOrder(ctx, in, out)
}

func (h *orderServiceHandler) DeleteOrder(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.DeleteOrder(ctx, in, out)
}

func (h *orderServiceHandler) CustomerSubmitOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerSubmitOrder(ctx, in, out)
}

func (h *orderServiceHandler) CustomerDetailOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerDetailOrder(ctx, in, out)
}

func (h *orderServiceHandler) CustomerConfirmOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerConfirmOrder(ctx, in, out)
}

func (h *orderServiceHandler) CustomerGetListOrderProcess(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerGetListOrderProcess(ctx, in, out)
}

func (h *orderServiceHandler) CustomerChangeStatus(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerChangeStatus(ctx, in, out)
}

func (h *orderServiceHandler) CustomerCancelOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerCancelOrder(ctx, in, out)
}

func (h *orderServiceHandler) CustomerCheckOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.CustomerCheckOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentGetListProcessAndHistoryOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentGetListProcessAndHistoryOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentAcceptOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentAcceptOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentPickupOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentPickupOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentGoingOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentGoingOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentConfirmCodeOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentConfirmCodeOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentUpdateAmountOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentUpdateAmountOrder(ctx, in, out)
}

func (h *orderServiceHandler) AgentGetFeeTransactionOrder(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.OrderServiceHandler.AgentGetFeeTransactionOrder(ctx, in, out)
}

// Api Endpoints for RatingService service

func NewRatingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RatingService service

type RatingService interface {
	// for clients grpc
	CreateAgentRating(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error)
	CreateCustomerRating(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error)
	GetAgentRatings(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error)
	GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error)
	GetCustomerRatings(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error)
	GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error)
	// for customer
	CustomerCreateAgentRating(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetRatings(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetRatingTotal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	AgentCreateCustomerRating(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetRatings(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AgentGetRatingTotal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type ratingService struct {
	c    client.Client
	name string
}

func NewRatingService(name string, c client.Client) RatingService {
	return &ratingService{
		c:    c,
		name: name,
	}
}

func (c *ratingService) CreateAgentRating(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.CreateAgentRating", in)
	out := new(AgentRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) CreateCustomerRating(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.CreateCustomerRating", in)
	out := new(UserRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) GetAgentRatings(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.GetAgentRatings", in)
	out := new(AgentRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, opts ...client.CallOption) (*AgentRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.GetAgentRatingTotal", in)
	out := new(AgentRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) GetCustomerRatings(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.GetCustomerRatings", in)
	out := new(UserRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, opts ...client.CallOption) (*UserRatingResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.GetCustomerRatingTotal", in)
	out := new(UserRatingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) CustomerCreateAgentRating(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.CustomerCreateAgentRating", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) CustomerGetRatings(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.CustomerGetRatings", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) CustomerGetRatingTotal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.CustomerGetRatingTotal", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) AgentCreateCustomerRating(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.AgentCreateCustomerRating", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) AgentGetRatings(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.AgentGetRatings", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingService) AgentGetRatingTotal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "RatingService.AgentGetRatingTotal", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RatingService service

type RatingServiceHandler interface {
	// for clients grpc
	CreateAgentRating(context.Context, *AgentRatingRequest, *AgentRatingResponse) error
	CreateCustomerRating(context.Context, *UserRatingRequest, *UserRatingResponse) error
	GetAgentRatings(context.Context, *AgentRatingRequest, *AgentRatingResponse) error
	GetAgentRatingTotal(context.Context, *AgentRatingRequest, *AgentRatingResponse) error
	GetCustomerRatings(context.Context, *UserRatingRequest, *UserRatingResponse) error
	GetCustomerRatingTotal(context.Context, *UserRatingRequest, *UserRatingResponse) error
	// for customer
	CustomerCreateAgentRating(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetRatings(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetRatingTotal(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	AgentCreateCustomerRating(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetRatings(context.Context, *BaseRequest, *BaseResponse) error
	AgentGetRatingTotal(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterRatingServiceHandler(s server.Server, hdlr RatingServiceHandler, opts ...server.HandlerOption) error {
	type ratingService interface {
		CreateAgentRating(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error
		CreateCustomerRating(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error
		GetAgentRatings(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error
		GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error
		GetCustomerRatings(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error
		GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error
		CustomerCreateAgentRating(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetRatings(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetRatingTotal(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentCreateCustomerRating(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetRatings(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AgentGetRatingTotal(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type RatingService struct {
		ratingService
	}
	h := &ratingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RatingService{h}, opts...))
}

type ratingServiceHandler struct {
	RatingServiceHandler
}

func (h *ratingServiceHandler) CreateAgentRating(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error {
	return h.RatingServiceHandler.CreateAgentRating(ctx, in, out)
}

func (h *ratingServiceHandler) CreateCustomerRating(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error {
	return h.RatingServiceHandler.CreateCustomerRating(ctx, in, out)
}

func (h *ratingServiceHandler) GetAgentRatings(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error {
	return h.RatingServiceHandler.GetAgentRatings(ctx, in, out)
}

func (h *ratingServiceHandler) GetAgentRatingTotal(ctx context.Context, in *AgentRatingRequest, out *AgentRatingResponse) error {
	return h.RatingServiceHandler.GetAgentRatingTotal(ctx, in, out)
}

func (h *ratingServiceHandler) GetCustomerRatings(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error {
	return h.RatingServiceHandler.GetCustomerRatings(ctx, in, out)
}

func (h *ratingServiceHandler) GetCustomerRatingTotal(ctx context.Context, in *UserRatingRequest, out *UserRatingResponse) error {
	return h.RatingServiceHandler.GetCustomerRatingTotal(ctx, in, out)
}

func (h *ratingServiceHandler) CustomerCreateAgentRating(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.CustomerCreateAgentRating(ctx, in, out)
}

func (h *ratingServiceHandler) CustomerGetRatings(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.CustomerGetRatings(ctx, in, out)
}

func (h *ratingServiceHandler) CustomerGetRatingTotal(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.CustomerGetRatingTotal(ctx, in, out)
}

func (h *ratingServiceHandler) AgentCreateCustomerRating(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.AgentCreateCustomerRating(ctx, in, out)
}

func (h *ratingServiceHandler) AgentGetRatings(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.AgentGetRatings(ctx, in, out)
}

func (h *ratingServiceHandler) AgentGetRatingTotal(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.RatingServiceHandler.AgentGetRatingTotal(ctx, in, out)
}
