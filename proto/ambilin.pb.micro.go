// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ambilin.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	// for admin
	ValidateSessionAdmin(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	LoginAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ForgotPasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ResetPasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ResetPasswordValidateAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ChangePasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	LogoutAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	LoginCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CreatePinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	VerifyPinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ChangePinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ForgotPinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	LogoutCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for agent
	ValidateSessionAgent(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	LoginAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	VerifyOtpLoginAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	LogoutAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for partner
	LoginPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) ValidateSessionAdmin(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ValidateSessionAdmin", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LoginAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LoginAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ForgotPasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ForgotPasswordAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ResetPasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ResetPasswordAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ResetPasswordValidateAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ResetPasswordValidateAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ChangePasswordAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ChangePasswordAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LogoutAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LogoutAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LoginCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LoginCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CreatePinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CreatePinCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) VerifyPinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.VerifyPinCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ChangePinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ChangePinCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ForgotPinCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ForgotPinCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LogoutCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LogoutCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ValidateSessionAgent(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ValidateSessionAgent", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LoginAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LoginAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) VerifyOtpLoginAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.VerifyOtpLoginAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LogoutAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LogoutAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LoginPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.LoginPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	// for admin
	ValidateSessionAdmin(context.Context, *SessionRequest, *SessionResponse) error
	LoginAdmin(context.Context, *BaseRequest, *BaseResponse) error
	ForgotPasswordAdmin(context.Context, *BaseRequest, *BaseResponse) error
	ResetPasswordAdmin(context.Context, *BaseRequest, *BaseResponse) error
	ResetPasswordValidateAdmin(context.Context, *BaseRequest, *BaseResponse) error
	ChangePasswordAdmin(context.Context, *BaseRequest, *BaseResponse) error
	LogoutAdmin(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	LoginCustomer(context.Context, *BaseRequest, *BaseResponse) error
	CreatePinCustomer(context.Context, *BaseRequest, *BaseResponse) error
	VerifyPinCustomer(context.Context, *BaseRequest, *BaseResponse) error
	ChangePinCustomer(context.Context, *BaseRequest, *BaseResponse) error
	ForgotPinCustomer(context.Context, *BaseRequest, *BaseResponse) error
	LogoutCustomer(context.Context, *BaseRequest, *BaseResponse) error
	// for agent
	ValidateSessionAgent(context.Context, *SessionRequest, *SessionResponse) error
	LoginAgent(context.Context, *BaseRequest, *BaseResponse) error
	VerifyOtpLoginAgent(context.Context, *BaseRequest, *BaseResponse) error
	LogoutAgent(context.Context, *BaseRequest, *BaseResponse) error
	// for partner
	LoginPartner(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		ValidateSessionAdmin(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		LoginAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ForgotPasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ResetPasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ResetPasswordValidateAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ChangePasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		LogoutAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		LoginCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CreatePinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		VerifyPinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ChangePinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ForgotPinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		LogoutCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ValidateSessionAgent(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		LoginAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		VerifyOtpLoginAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		LogoutAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		LoginPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) ValidateSessionAdmin(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.ValidateSessionAdmin(ctx, in, out)
}

func (h *authServiceHandler) LoginAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LoginAdmin(ctx, in, out)
}

func (h *authServiceHandler) ForgotPasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ForgotPasswordAdmin(ctx, in, out)
}

func (h *authServiceHandler) ResetPasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ResetPasswordAdmin(ctx, in, out)
}

func (h *authServiceHandler) ResetPasswordValidateAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ResetPasswordValidateAdmin(ctx, in, out)
}

func (h *authServiceHandler) ChangePasswordAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ChangePasswordAdmin(ctx, in, out)
}

func (h *authServiceHandler) LogoutAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LogoutAdmin(ctx, in, out)
}

func (h *authServiceHandler) LoginCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LoginCustomer(ctx, in, out)
}

func (h *authServiceHandler) CreatePinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.CreatePinCustomer(ctx, in, out)
}

func (h *authServiceHandler) VerifyPinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.VerifyPinCustomer(ctx, in, out)
}

func (h *authServiceHandler) ChangePinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ChangePinCustomer(ctx, in, out)
}

func (h *authServiceHandler) ForgotPinCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.ForgotPinCustomer(ctx, in, out)
}

func (h *authServiceHandler) LogoutCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LogoutCustomer(ctx, in, out)
}

func (h *authServiceHandler) ValidateSessionAgent(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.AuthServiceHandler.ValidateSessionAgent(ctx, in, out)
}

func (h *authServiceHandler) LoginAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LoginAgent(ctx, in, out)
}

func (h *authServiceHandler) VerifyOtpLoginAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.VerifyOtpLoginAgent(ctx, in, out)
}

func (h *authServiceHandler) LogoutAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LogoutAgent(ctx, in, out)
}

func (h *authServiceHandler) LoginPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.AuthServiceHandler.LoginPartner(ctx, in, out)
}

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	// for admin
	GetListCustomerPersonalAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	GetListCustomerPartnershipAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CreateCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	ValidateCustomerPhoneAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	GetDetailCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	UpdateCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUsers", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetListCustomerPersonalAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetListCustomerPersonalAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetListCustomerPartnershipAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetListCustomerPartnershipAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateCustomerAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ValidateCustomerPhoneAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ValidateCustomerPhoneAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetDetailCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetDetailCustomerAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateCustomerAdmin(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateCustomerAdmin", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	GetUsers(context.Context, *UserRequest, *UserResponse) error
	GetUser(context.Context, *UserRequest, *UserResponse) error
	CreateUser(context.Context, *UserRequest, *UserResponse) error
	UpdateUser(context.Context, *UserRequest, *UserResponse) error
	DeleteUser(context.Context, *UserRequest, *UserResponse) error
	// for admin
	GetListCustomerPersonalAdmin(context.Context, *BaseRequest, *BaseResponse) error
	GetListCustomerPartnershipAdmin(context.Context, *BaseRequest, *BaseResponse) error
	CreateCustomerAdmin(context.Context, *BaseRequest, *BaseResponse) error
	ValidateCustomerPhoneAdmin(context.Context, *BaseRequest, *BaseResponse) error
	GetDetailCustomerAdmin(context.Context, *BaseRequest, *BaseResponse) error
	UpdateCustomerAdmin(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error
		GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		GetListCustomerPersonalAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		GetListCustomerPartnershipAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CreateCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		ValidateCustomerPhoneAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		GetDetailCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		UpdateCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUsers(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) GetListCustomerPersonalAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.GetListCustomerPersonalAdmin(ctx, in, out)
}

func (h *userServiceHandler) GetListCustomerPartnershipAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.GetListCustomerPartnershipAdmin(ctx, in, out)
}

func (h *userServiceHandler) CreateCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CreateCustomerAdmin(ctx, in, out)
}

func (h *userServiceHandler) ValidateCustomerPhoneAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.ValidateCustomerPhoneAdmin(ctx, in, out)
}

func (h *userServiceHandler) GetDetailCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.GetDetailCustomerAdmin(ctx, in, out)
}

func (h *userServiceHandler) UpdateCustomerAdmin(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.UpdateCustomerAdmin(ctx, in, out)
}
