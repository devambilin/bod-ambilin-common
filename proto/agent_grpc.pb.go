// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// for clients grpc
	GetAgents(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	GetAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	CreateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	UpdateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	DeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	// for admin
	AdminGetListAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AdminCreateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AdminValidateMidAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AdminGetDetailAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AdminUpdateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AdminDeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	// for agent
	AgentDashboard(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentDetail(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentHistory(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentListNotification(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentDeleteNotification(ctx context.Context, in *AgentNotificationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentReadNotification(ctx context.Context, in *AgentNotificationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentUpdatePhoto(ctx context.Context, in *AgentPhotoRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentCheckLimitPickup(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentUpdateData(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentChangeStatus(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentSetLimitPickup(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentGetListCustomer(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentGetLimitPickup(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentGetTutorial(ctx context.Context, in *AgentTutorialRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentUpdateTutorial(ctx context.Context, in *AgentTutorialRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentGetPab(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentSetupLocation(ctx context.Context, in *AgentSetupLocationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentListVehicle(ctx context.Context, in *AgentVehicleRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	AgentSubmitVehicle(ctx context.Context, in *AgentVehicleRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error)
	// for customer
	CustomerDetailAgent(ctx context.Context, in *AgentDetailCustomer, opts ...grpc.CallOption) (*AgentBaseResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) GetAgents(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/GetAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/CreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminGetListAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminGetListAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminCreateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminCreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminValidateMidAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminValidateMidAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminGetDetailAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminGetDetailAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminUpdateAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminUpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AdminDeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AdminDeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentDashboard(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentDetail(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentHistory(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentListNotification(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentListNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentDeleteNotification(ctx context.Context, in *AgentNotificationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentDeleteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentReadNotification(ctx context.Context, in *AgentNotificationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentReadNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentUpdatePhoto(ctx context.Context, in *AgentPhotoRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentUpdatePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentCheckLimitPickup(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentCheckLimitPickup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentUpdateData(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentUpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentChangeStatus(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentSetLimitPickup(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentSetLimitPickup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentGetListCustomer(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentGetListCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentGetLimitPickup(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentGetLimitPickup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentGetTutorial(ctx context.Context, in *AgentTutorialRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentGetTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentUpdateTutorial(ctx context.Context, in *AgentTutorialRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentUpdateTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentGetPab(ctx context.Context, in *AgentGlobalRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentGetPab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentSetupLocation(ctx context.Context, in *AgentSetupLocationRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentSetupLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentListVehicle(ctx context.Context, in *AgentVehicleRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentListVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentSubmitVehicle(ctx context.Context, in *AgentVehicleRequest, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/AgentSubmitVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CustomerDetailAgent(ctx context.Context, in *AgentDetailCustomer, opts ...grpc.CallOption) (*AgentBaseResponse, error) {
	out := new(AgentBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentService/CustomerDetailAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// for clients grpc
	GetAgents(context.Context, *AgentRequest) (*AgentResponse, error)
	GetAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	CreateAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	UpdateAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	DeleteAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	// for admin
	AdminGetListAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AdminCreateAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AdminValidateMidAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AdminGetDetailAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AdminUpdateAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AdminDeleteAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	// for agent
	AgentDashboard(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentDetail(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentHistory(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentListNotification(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentDeleteNotification(context.Context, *AgentNotificationRequest) (*AgentBaseResponse, error)
	AgentReadNotification(context.Context, *AgentNotificationRequest) (*AgentBaseResponse, error)
	AgentUpdatePhoto(context.Context, *AgentPhotoRequest) (*AgentBaseResponse, error)
	AgentCheckLimitPickup(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentUpdateData(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AgentChangeStatus(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AgentSetLimitPickup(context.Context, *AgentRequest) (*AgentBaseResponse, error)
	AgentGetListCustomer(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentGetLimitPickup(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentGetTutorial(context.Context, *AgentTutorialRequest) (*AgentBaseResponse, error)
	AgentUpdateTutorial(context.Context, *AgentTutorialRequest) (*AgentBaseResponse, error)
	AgentGetPab(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error)
	AgentSetupLocation(context.Context, *AgentSetupLocationRequest) (*AgentBaseResponse, error)
	AgentListVehicle(context.Context, *AgentVehicleRequest) (*AgentBaseResponse, error)
	AgentSubmitVehicle(context.Context, *AgentVehicleRequest) (*AgentBaseResponse, error)
	// for customer
	CustomerDetailAgent(context.Context, *AgentDetailCustomer) (*AgentBaseResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) GetAgents(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgents not implemented")
}
func (UnimplementedAgentServiceServer) GetAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedAgentServiceServer) CreateAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedAgentServiceServer) UpdateAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedAgentServiceServer) DeleteAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminGetListAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetListAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminCreateAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminValidateMidAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminValidateMidAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminGetDetailAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetDetailAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminUpdateAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAgent not implemented")
}
func (UnimplementedAgentServiceServer) AdminDeleteAgent(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAgent not implemented")
}
func (UnimplementedAgentServiceServer) AgentDashboard(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDashboard not implemented")
}
func (UnimplementedAgentServiceServer) AgentDetail(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDetail not implemented")
}
func (UnimplementedAgentServiceServer) AgentHistory(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentHistory not implemented")
}
func (UnimplementedAgentServiceServer) AgentListNotification(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentListNotification not implemented")
}
func (UnimplementedAgentServiceServer) AgentDeleteNotification(context.Context, *AgentNotificationRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDeleteNotification not implemented")
}
func (UnimplementedAgentServiceServer) AgentReadNotification(context.Context, *AgentNotificationRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReadNotification not implemented")
}
func (UnimplementedAgentServiceServer) AgentUpdatePhoto(context.Context, *AgentPhotoRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUpdatePhoto not implemented")
}
func (UnimplementedAgentServiceServer) AgentCheckLimitPickup(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCheckLimitPickup not implemented")
}
func (UnimplementedAgentServiceServer) AgentUpdateData(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUpdateData not implemented")
}
func (UnimplementedAgentServiceServer) AgentChangeStatus(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentChangeStatus not implemented")
}
func (UnimplementedAgentServiceServer) AgentSetLimitPickup(context.Context, *AgentRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSetLimitPickup not implemented")
}
func (UnimplementedAgentServiceServer) AgentGetListCustomer(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetListCustomer not implemented")
}
func (UnimplementedAgentServiceServer) AgentGetLimitPickup(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetLimitPickup not implemented")
}
func (UnimplementedAgentServiceServer) AgentGetTutorial(context.Context, *AgentTutorialRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetTutorial not implemented")
}
func (UnimplementedAgentServiceServer) AgentUpdateTutorial(context.Context, *AgentTutorialRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUpdateTutorial not implemented")
}
func (UnimplementedAgentServiceServer) AgentGetPab(context.Context, *AgentGlobalRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetPab not implemented")
}
func (UnimplementedAgentServiceServer) AgentSetupLocation(context.Context, *AgentSetupLocationRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSetupLocation not implemented")
}
func (UnimplementedAgentServiceServer) AgentListVehicle(context.Context, *AgentVehicleRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentListVehicle not implemented")
}
func (UnimplementedAgentServiceServer) AgentSubmitVehicle(context.Context, *AgentVehicleRequest) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSubmitVehicle not implemented")
}
func (UnimplementedAgentServiceServer) CustomerDetailAgent(context.Context, *AgentDetailCustomer) (*AgentBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetailAgent not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_GetAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/GetAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetAgents(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/CreateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminGetListAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminGetListAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminGetListAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminGetListAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminCreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminCreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminCreateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminCreateAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminValidateMidAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminValidateMidAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminValidateMidAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminValidateMidAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminGetDetailAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminGetDetailAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminGetDetailAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminGetDetailAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminUpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminUpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminUpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminUpdateAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AdminDeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AdminDeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AdminDeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AdminDeleteAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentDashboard(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentDetail(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentHistory(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentListNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentListNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentListNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentListNotification(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentDeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentDeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentDeleteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentDeleteNotification(ctx, req.(*AgentNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentReadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentReadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentReadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentReadNotification(ctx, req.(*AgentNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentUpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentUpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentUpdatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentUpdatePhoto(ctx, req.(*AgentPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentCheckLimitPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentCheckLimitPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentCheckLimitPickup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentCheckLimitPickup(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentUpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentUpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentUpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentUpdateData(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentChangeStatus(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentSetLimitPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentSetLimitPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentSetLimitPickup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentSetLimitPickup(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentGetListCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentGetListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentGetListCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentGetListCustomer(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentGetLimitPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentGetLimitPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentGetLimitPickup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentGetLimitPickup(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentGetTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentGetTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentGetTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentGetTutorial(ctx, req.(*AgentTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentUpdateTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentUpdateTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentUpdateTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentUpdateTutorial(ctx, req.(*AgentTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentGetPab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentGetPab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentGetPab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentGetPab(ctx, req.(*AgentGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentSetupLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSetupLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentSetupLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentSetupLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentSetupLocation(ctx, req.(*AgentSetupLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentListVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentListVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentListVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentListVehicle(ctx, req.(*AgentVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentSubmitVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentSubmitVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/AgentSubmitVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentSubmitVehicle(ctx, req.(*AgentVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CustomerDetailAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentDetailCustomer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CustomerDetailAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentService/CustomerDetailAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CustomerDetailAgent(ctx, req.(*AgentDetailCustomer))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgents",
			Handler:    _AgentService_GetAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AgentService_GetAgent_Handler,
		},
		{
			MethodName: "CreateAgent",
			Handler:    _AgentService_CreateAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AgentService_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AgentService_DeleteAgent_Handler,
		},
		{
			MethodName: "AdminGetListAgent",
			Handler:    _AgentService_AdminGetListAgent_Handler,
		},
		{
			MethodName: "AdminCreateAgent",
			Handler:    _AgentService_AdminCreateAgent_Handler,
		},
		{
			MethodName: "AdminValidateMidAgent",
			Handler:    _AgentService_AdminValidateMidAgent_Handler,
		},
		{
			MethodName: "AdminGetDetailAgent",
			Handler:    _AgentService_AdminGetDetailAgent_Handler,
		},
		{
			MethodName: "AdminUpdateAgent",
			Handler:    _AgentService_AdminUpdateAgent_Handler,
		},
		{
			MethodName: "AdminDeleteAgent",
			Handler:    _AgentService_AdminDeleteAgent_Handler,
		},
		{
			MethodName: "AgentDashboard",
			Handler:    _AgentService_AgentDashboard_Handler,
		},
		{
			MethodName: "AgentDetail",
			Handler:    _AgentService_AgentDetail_Handler,
		},
		{
			MethodName: "AgentHistory",
			Handler:    _AgentService_AgentHistory_Handler,
		},
		{
			MethodName: "AgentListNotification",
			Handler:    _AgentService_AgentListNotification_Handler,
		},
		{
			MethodName: "AgentDeleteNotification",
			Handler:    _AgentService_AgentDeleteNotification_Handler,
		},
		{
			MethodName: "AgentReadNotification",
			Handler:    _AgentService_AgentReadNotification_Handler,
		},
		{
			MethodName: "AgentUpdatePhoto",
			Handler:    _AgentService_AgentUpdatePhoto_Handler,
		},
		{
			MethodName: "AgentCheckLimitPickup",
			Handler:    _AgentService_AgentCheckLimitPickup_Handler,
		},
		{
			MethodName: "AgentUpdateData",
			Handler:    _AgentService_AgentUpdateData_Handler,
		},
		{
			MethodName: "AgentChangeStatus",
			Handler:    _AgentService_AgentChangeStatus_Handler,
		},
		{
			MethodName: "AgentSetLimitPickup",
			Handler:    _AgentService_AgentSetLimitPickup_Handler,
		},
		{
			MethodName: "AgentGetListCustomer",
			Handler:    _AgentService_AgentGetListCustomer_Handler,
		},
		{
			MethodName: "AgentGetLimitPickup",
			Handler:    _AgentService_AgentGetLimitPickup_Handler,
		},
		{
			MethodName: "AgentGetTutorial",
			Handler:    _AgentService_AgentGetTutorial_Handler,
		},
		{
			MethodName: "AgentUpdateTutorial",
			Handler:    _AgentService_AgentUpdateTutorial_Handler,
		},
		{
			MethodName: "AgentGetPab",
			Handler:    _AgentService_AgentGetPab_Handler,
		},
		{
			MethodName: "AgentSetupLocation",
			Handler:    _AgentService_AgentSetupLocation_Handler,
		},
		{
			MethodName: "AgentListVehicle",
			Handler:    _AgentService_AgentListVehicle_Handler,
		},
		{
			MethodName: "AgentSubmitVehicle",
			Handler:    _AgentService_AgentSubmitVehicle_Handler,
		},
		{
			MethodName: "CustomerDetailAgent",
			Handler:    _AgentService_CustomerDetailAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agent.proto",
}
