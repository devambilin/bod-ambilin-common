// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	// for clients grpc
	GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	// for admin
	AdminGetUserType(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminCreateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminUpdateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminDeleteCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetListPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminGetDetailPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminCreatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminUpdatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	AdminDeletePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	// for customer
	CustomerGetDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetPromo(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetDetail(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerUpdate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerGetNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
	CustomerDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUsers(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUsers", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetUserType(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetUserType", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListCustomerPersonal", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListCustomerPartnership", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminCreateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminCreateCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminValidateCustomerPhone", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDetailCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminUpdateCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminUpdateCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminDeleteCustomer(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminDeleteCustomer", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetListPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetListPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDataMasterPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminGetDetailPartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminGetDetailPartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminCreatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminCreatePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminUpdatePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminUpdatePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminDeletePartner(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminDeletePartner", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetDashboard(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetDashboard", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetPromo(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetPromo", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetDetail(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetDetail", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetCustomerHistory", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerUpdate(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerUpdate", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerFavouriteAgent", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerUploadPhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerUploadPhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerDeletePhoto(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerDeletePhoto", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerGetNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerGetNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerReadNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerReadNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CustomerDeleteNotification(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CustomerDeleteNotification", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// for clients grpc
	GetUsers(context.Context, *UserRequest, *UserResponse) error
	GetUser(context.Context, *UserRequest, *UserResponse) error
	CreateUser(context.Context, *UserRequest, *UserResponse) error
	UpdateUser(context.Context, *UserRequest, *UserResponse) error
	DeleteUser(context.Context, *UserRequest, *UserResponse) error
	// for admin
	AdminGetUserType(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListCustomerPersonal(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListCustomerPartnership(context.Context, *BaseRequest, *BaseResponse) error
	AdminCreateCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminValidateCustomerPhone(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDetailCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminUpdateCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminDeleteCustomer(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetListPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDataMasterPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminGetDetailPartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminCreatePartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminUpdatePartner(context.Context, *BaseRequest, *BaseResponse) error
	AdminDeletePartner(context.Context, *BaseRequest, *BaseResponse) error
	// for customer
	CustomerGetDashboard(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetPromo(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetDetail(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetCustomerHistory(context.Context, *BaseRequest, *BaseResponse) error
	CustomerUpdate(context.Context, *BaseRequest, *BaseResponse) error
	CustomerFavouriteAgent(context.Context, *BaseRequest, *BaseResponse) error
	CustomerUploadPhoto(context.Context, *BaseRequest, *BaseResponse) error
	CustomerDeletePhoto(context.Context, *BaseRequest, *BaseResponse) error
	CustomerGetNotification(context.Context, *BaseRequest, *BaseResponse) error
	CustomerReadNotification(context.Context, *BaseRequest, *BaseResponse) error
	CustomerDeleteNotification(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error
		GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		AdminGetUserType(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminCreateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminUpdateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminDeleteCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetListPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminGetDetailPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminCreatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminUpdatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		AdminDeletePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetPromo(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetDetail(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerUpdate(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerGetNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
		CustomerDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUsers(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUsers(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) AdminGetUserType(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetUserType(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListCustomerPersonal(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListCustomerPersonal(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListCustomerPartnership(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListCustomerPartnership(ctx, in, out)
}

func (h *userServiceHandler) AdminCreateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminCreateCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminValidateCustomerPhone(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminValidateCustomerPhone(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDetailCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDetailCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminUpdateCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminUpdateCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminDeleteCustomer(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminDeleteCustomer(ctx, in, out)
}

func (h *userServiceHandler) AdminGetListPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetListPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDataMasterPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDataMasterPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminGetDetailPartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminGetDetailPartner(ctx, in, out)
}

func (h *userServiceHandler) AdminCreatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminCreatePartner(ctx, in, out)
}

func (h *userServiceHandler) AdminUpdatePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminUpdatePartner(ctx, in, out)
}

func (h *userServiceHandler) AdminDeletePartner(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.AdminDeletePartner(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetDashboard(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetDashboard(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetPromo(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetPromo(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetDetail(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetDetail(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetCustomerHistory(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetCustomerHistory(ctx, in, out)
}

func (h *userServiceHandler) CustomerUpdate(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerUpdate(ctx, in, out)
}

func (h *userServiceHandler) CustomerFavouriteAgent(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerFavouriteAgent(ctx, in, out)
}

func (h *userServiceHandler) CustomerUploadPhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerUploadPhoto(ctx, in, out)
}

func (h *userServiceHandler) CustomerDeletePhoto(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerDeletePhoto(ctx, in, out)
}

func (h *userServiceHandler) CustomerGetNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerGetNotification(ctx, in, out)
}

func (h *userServiceHandler) CustomerReadNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerReadNotification(ctx, in, out)
}

func (h *userServiceHandler) CustomerDeleteNotification(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.UserServiceHandler.CustomerDeleteNotification(ctx, in, out)
}
